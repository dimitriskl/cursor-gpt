# Product Requirements Document (PRD)

## Overview
The project is a GPT-powered chatbot web application that allows users to interact with LLMs for text-based conversations and generate images using the OpenAI API. The application is designed for anyone interested in chatting with AI or creating images from prompts. The solution aims for a maintainable, scalable, and modern architecture using NextJS, React, TypeScript, TailwindCSS, ShadUI, and Supabase (Edge Functions and Database).

## Core Features

### 1. Chat Functionality
- **What:** Users can send and receive messages in a chat interface.
- **Why:** Core to the chatbot experience, enabling real-time interaction with the LLM.
- **How:** Uses Supabase Edge Functions for backend chat logic and Supabase Database for message storage. The frontend streams responses from OpenAI using the OpenAI SDK.

### 2. Streamed Text Responses
- **What:** Chatbot responses are streamed to the UI as they are generated.
- **Why:** Improves user experience by providing immediate feedback and a more natural conversation flow.
- **How:** Integrates OpenAI’s streaming API (see docs/tech/OpenAI_StreamText.md).

### 3. Image Generation Toggle
- **What:** Users can toggle an “image mode” to generate images from prompts.
- **Why:** Expands the chatbot’s capabilities beyond text, making it more engaging.
- **How:** Uses OpenAI’s image generation API (see docs/tech/OpenAI_ImageGeneration.md), specifically the `gpt-image-1` model.

### 4. New Chat
- **What:** Users can start a new chat session.
- **Why:** Allows users to reset the conversation and begin fresh interactions.
- **How:** Resets the chat state in the frontend and backend.

## User Experience

### User Personas
- General users interested in AI chat and image generation.
- No authentication required for MVP.

### Key User Flows
1. User opens the app and sees the chat interface.
2. User types a message and receives a streamed response.
3. User toggles image mode and submits a prompt to generate an image.
4. User clicks “New Chat” to start over.

### UI/UX Considerations
- Simple, clean design using TailwindCSS and ShadUI.
- Responsive layout for desktop and mobile.
- Minimalist interface for MVP; advanced styling and features deferred.

## Technical Architecture

### System Components
- **Frontend:** NextJS (App Directory), React, TypeScript, TailwindCSS, ShadUI.
- **Backend:** Supabase Edge Functions (chat logic), Supabase Database (message storage).
- **APIs:** OpenAI for text and image generation.

### Data Models
- **Message:** { id, user, content, type (text/image), timestamp }
- **Chat:** { id, messages[] }

### APIs and Integrations
- **OpenAI SDK:** For streaming text and image generation (docs/tech/OpenAI_StreamText.md, docs/tech/OpenAI_ImageGeneration.md)
- **Supabase Edge Functions:** For chat logic (docs/tech/Supabase_EdgeFunctions.md)
- **Supabase Database:** For storing chat messages (docs/tech/Supabase_Migrations_Local.md)

### Infrastructure Requirements
- Local development using Supabase CLI and Docker (docs/tech/Supabase_CLI_GettingStarted.md)
- NodeJS for NextJS app

## Development Roadmap

### MVP Requirements
- Implement chat UI with message streaming
- Integrate OpenAI text and image APIs
- Set up Supabase Edge Functions and Database
- Basic styling with TailwindCSS and ShadUI
- “New Chat” functionality

### Future Enhancements (not in MVP)
- User authentication
- Persistent chat history
- Advanced UI/UX (dark mode, animations)
- Performance optimizations
- Security hardening (API key management, input validation)
- Deployment and CI/CD

## Logical Dependency Chain

1. Set up local development environment (Supabase CLI, Docker, NodeJS)
2. Scaffold NextJS app structure
3. Implement chat UI and basic state management
4. Integrate OpenAI streaming for text
5. Add Supabase Edge Functions for backend chat logic
6. Set up Supabase Database and migrations for message storage
7. Implement image generation toggle and integration
8. Add “New Chat” functionality
9. Apply basic styling with TailwindCSS and ShadUI
10. Reference documentation at each step for syntax and best practices

## Risks and Mitigations

- **Technical challenges:** Integration of streaming APIs and Supabase Edge Functions.  
  *Mitigation:* Follow official docs and test each integration incrementally.
- **MVP scope creep:** Avoid adding non-essential features (auth, advanced UI) until core is working.
- **Local setup issues:** Ensure all required tools (Supabase CLI, Docker, NodeJS) are installed and documented.
- **Security:** Defer advanced security until after MVP, but plan for API key management.

## Appendix

- docs/tech/NextJS_AppDirectory.md
- docs/tech/OpenAI_StreamText.md
- docs/tech/OpenAI_ImageGeneration.md
- docs/tech/Supabase_EdgeFunctions.md
- docs/tech/Supabase_Migrations_Local.md
- docs/tech/Supabase_Commands.md
- docs/tech/Security_BestPractices.md 